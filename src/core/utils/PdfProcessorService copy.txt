import { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';
import formidable from 'formidable';
import * as fs from 'fs/promises';
import * as pdf from 'pdf-parse';
import { HfInference } from '@huggingface/inference';
import { createClient } from '@supabase/supabase-js';
import { encode, decode } from 'gpt-3-encoder'; // For tokenization
import * as retry from 'retry';


@Injectable()
export class PdfProcessorService {

  private hf = new HfInference(process.env.HF_ACCESS_TOKEN);

  private supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_KEY,{ db: { schema: 'public' }, auth: { persistSession: false } }
  );

  // async handleFileUpload(req): Promise<{ file: any; metadata: any }> {
  //   const form = formidable({
  //     maxFileSize: 5 * 1024 * 1024, // 5MB
  //     allowEmptyFiles: false,
  //     filter: ({ mimetype }) => mimetype === 'application/pdf',
  //   });

  //   return new Promise((resolve, reject) => {
  //     form.parse(req, async (err, fields, files) => {
  //       if (err) {
  //         return reject(err);
  //       }

  //       const file = files.file[0];
  //       const metadata = {
  //         userId: fields.userId,
  //         submissionId: fields.submissionId,
  //         title: fields.title,
  //         uploadType: fields.uploadType,
  //       };

  //       if (!metadata.userId || !metadata.submissionId || !metadata.title || !metadata.uploadType) {
  //         return reject(new BadRequestException('Invalid metadata'));
  //       }

  //       const filePath = `./uploads/${file.newFilename}`;
  //       await fs.rename(file.filepath, filePath);

  //       resolve({
  //         file: {
  //           url: filePath,
  //           type: file.mimetype,
  //           size: file.size,
  //         },
  //         metadata,
  //       });
  //     });
  //   });
  // }

  // async fetchFile(fileUrl: string): Promise<Buffer> {
  //   console.log(fs.readFile(fileUrl), fileUrl, 'fmldmlm')
  //   return await fs.readFile(fileUrl);
  // }

  // async fetchFileFromSupabase(filePath: string): Promise<Buffer> {
  //   try {
  //     console.log(filePath, this.supabase, 'dsds')
  //     const { data, error } = await this.supabase.storage
  //       .from('uploads')
  //       .download(filePath);

  //     if (error) {
  //       console.error('Detailed Supabase error:', {
  //         message: error.message,
  //         name: error.name,
  //         details: JSON.stringify(error)
  //       });
  //       throw new InternalServerErrorException('Failed to download file');
  //     }

  //     // Convert Blob to Buffer
  //     const arrayBuffer = await data.arrayBuffer();
  //     return Buffer.from(arrayBuffer);
  //   } catch (error) {
  //     console.error('Error fetching file:', error);
  //     throw new InternalServerErrorException('Failed to fetch file');
  //   }
  // }

  async fetchFile(fileUrl: string): Promise<Buffer> {
    const response = await fetch(fileUrl);
    const arrayBuffer = await response.arrayBuffer();
    return Buffer.from(arrayBuffer);
  }

  async parsePdfContent(fileBuffer: Buffer): Promise<string> {
    const data = await pdf(fileBuffer);
    return data.text;
  }

  // async summarizeText(text: string): Promise<string> {
  //   if (!text || typeof text !== 'string') {
  //     throw new BadRequestException('Invalid input text');
  //   }

  //   if (!process.env.HF_ACCESS_TOKEN) {
  //     throw new InternalServerErrorException('API key not configured');
  //   }

  //   try {
  //     const truncatedText = text.slice(0, 1000); // BART model limit

  //     const response = await this.hf.summarization({
  //       model: 'facebook/bart-large-cnn',
  //       inputs: text,
  //       parameters: {
  //         max_length: 1500,
  //         min_length: 100,
  //         // do_sample: false,
  //         temperature: 0.7,
  //       },
  //     });

  //     if (!response?.summary_text) {
  //       throw new InternalServerErrorException('Failed to generate summary');
  //     }

  //     return response.summary_text;
  //   } catch (error) {
  //     console.error('Summarization error:', error);
  //     throw new InternalServerErrorException('Summarization failed');
  //   }
  // }



  async summarizeText(text: string): Promise<string> {
    if (!text || typeof text !== 'string') {
      throw new BadRequestException('Invalid input text');
    }

    if (!process.env.HF_ACCESS_TOKEN) {
      throw new InternalServerErrorException('API key not configured');
    }

    try {
      // Split the text into chunks of ~1000 tokens
      const chunks = this.splitTextIntoChunks(text, 1000);

      // Summarize each chunk
      const summaries = await Promise.all(
        chunks.map((chunk) => this.summarizeChunk(chunk)),
      );

      // Combine the summaries
      const finalSummary = summaries.join(' ');
      return finalSummary;
    } catch (error) {
      console.error('Summarization error:', {
        message: error.message,
        name: error.name,
        details: error.response?.data || error,
      });
      throw new InternalServerErrorException('Summarization failed');
    }
  }

  private splitTextIntoChunks(text: string, maxTokens: number): string[] {
    const encodedText = encode(text);
    const chunks: string[] = [];

    for (let i = 0; i < encodedText.length; i += maxTokens) {
      const chunkTokens = encodedText.slice(i, i + maxTokens);
      const chunkText = decode(chunkTokens);
      chunks.push(chunkText);
    }

    return chunks;
  }

  private async summarizeChunk2(chunk: string): Promise<string> {
    const response = await this.hf.summarization({
      model: 'google/bigbird-pegasus-large-arxiv',
      // model: 'facebook/bart-large-cnn',
      inputs: chunk,
      parameters: {
        max_length: 150,
        min_length: 50,
        temperature: 0.7,
      },
    });

    if (!response?.summary_text) {
      throw new InternalServerErrorException('Failed to generate summary');
    }

    return response.summary_text;
  }


  private async summarizeChunk(chunk: string, maxRetries: number = 3): Promise<string> {
    const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
  
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const response = await this.hf.summarization({
          model: 'facebook/bart-large-cnn',
          inputs: chunk,
          parameters: {
            max_length: 150,
            min_length: 50,
            temperature: 0.7,
          },
        });
  
        if (!response?.summary_text) {
          throw new Error('Failed to generate summary');
        }
  
        return response.summary_text;
      } catch (error) {
        console.error(`Summarization attempt ${attempt} failed:`, error);
        
        if (attempt === maxRetries) {
          throw new InternalServerErrorException('Summarization failed after all retries');
        }
  
        // Exponential backoff
        await delay(Math.pow(2, attempt) * 1000);
      }
    }
  
    // This line should never be reached due to the throw in the loop, but TypeScript needs it
    throw new InternalServerErrorException('Unexpected error in summarization');
  }
}
